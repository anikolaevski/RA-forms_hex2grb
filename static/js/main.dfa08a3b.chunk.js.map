{"version":3,"sources":["DispColor.js","App.js","index.js"],"names":["startcolor","DispColor","useState","backgroundColor","styles","setStyles","hexToRgb","Statustext","setStatustext","className","style","id","type","onChange","evt","x","target","value","color","hex","trim","replace","includes","length","substring","e","document","getElementById","borderColor","CheckValidColor","y","val","size","rgb","red","green","blue","done","parseInt","App","ReactDOM","render","StrictMode"],"mappings":"sQAGMA,EAAa,OAEZ,SAASC,IAAa,MAECC,mBAAS,CAAEC,gBAAiBH,IAF7B,mBAEpBI,EAFoB,KAEZC,EAFY,OAGSH,mBAASI,EAASN,IAH3B,mBAGpBO,EAHoB,KAGRC,EAHQ,KAwBzB,OACE,sBAAMC,UAAU,UAAUC,MAAON,EAAjC,SACE,sBAAKK,UAAU,gBAAf,UACE,uBAAOA,UAAU,cAAcE,GAAG,YAAYC,KAAK,OAAOC,SAvB9C,SAACC,GACnB,IAAMC,EAAID,EAAIE,OAAOC,MAErB,GA2BJ,SAAyBC,GACvB,IAAIC,EAAMD,EAAME,OAAOC,QAAQ,IAAI,IACnC,IAAKH,EAAMI,SAAS,KAAQ,OAAO,EACnC,GAAIH,EAAII,OAAS,EAAK,OAAO,EACzBJ,EAAII,OAAS,GAAKJ,EAAII,OAAS,IAAKJ,EAAMA,EAAIK,UAAU,EAAG,IAC/D,GAAIL,EAAII,OAAS,EAAK,OAAO,EAE7B,IAAIE,EAAIC,SAASC,eAAe,cAChC,IAAKF,EAAK,OAAO,EAIjB,GAHAA,EAAEf,MAAMkB,YAAc,GACtBH,EAAEf,MAAMkB,YAAR,WAA0BT,GAEH,GADRM,EAAEf,MAAMkB,YACVL,OACT,OAAO,EAEX,OAAO,EA1CDM,CAAgBd,GAAI,CACtB,IAAMe,EAAIxB,EAASS,GACfe,GAEFzB,EAAU,CAAEF,gBAAiB2B,IAC7BtB,EAAcsB,KAGdzB,EAAU,CAAEF,gBAAiBY,IAC7BP,EAAcO,SAGhBV,EAAU,CAAEF,gBAAiB,SAC7BK,EAAc,4CAQV,mBAAGC,UAAU,gBAAb,SAA6B,sBAAME,GAAG,aAAT,SAAuBJ,WAwB9D,SAASD,EAASyB,GAChB,GAAGA,EAAIT,SAAS,OAAS,OAAOS,EAChC,IAAMZ,EAAMY,EAAIX,OAAOC,QAAQ,IAAI,IAC7BW,EAAOb,EAAII,OACXU,EAAM,CAAEC,IAAI,EAAGC,MAAM,EAAGC,KAAK,GAC/BC,GAAO,EACX,GAAa,IAATL,GAAeA,EAAO,GAAKA,EAAO,EACpCC,EAAIC,IAAMI,SAASnB,EAAI,GAAGA,EAAI,GAAI,IAClCc,EAAIE,MAAQG,SAASnB,EAAI,GAAGA,EAAI,GAAI,IACpCc,EAAIG,KAAOE,SAASnB,EAAI,GAAGA,EAAI,GAAI,IACnCkB,GAAO,OACF,GAAIL,GAAQ,EACjBC,EAAIC,IAAMI,SAASnB,EAAI,GAAGA,EAAI,GAAI,IAClCc,EAAIE,MAAQG,SAASnB,EAAI,GAAGA,EAAI,GAAI,IACpCc,EAAIG,KAAOE,SAASnB,EAAI,GAAGA,EAAI,GAAI,IACnCkB,GAAO,OACF,GAAIL,EAAO,EAChB,OAAO,KAET,OAAIK,EACI,OAAN,OAAcJ,EAAIC,IAAlB,YAAyBD,EAAIE,MAA7B,YAAsCF,EAAIG,KAA1C,KAEI,IAAN,OAAWjB,EAAI,IAAf,OAAoBA,EAAI,IAAxB,OAA6BA,EAAI,ICxEpB,SAASoB,IACtB,OAAQ,cAACtC,EAAD,ICFVuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFhB,SAASC,eAAe,W","file":"static/js/main.dfa08a3b.chunk.js","sourcesContent":["import React, {useState} from 'react';\n// import PropTypes from 'prop-types';\n// import shortid from 'shortid';\nconst startcolor = '#ddd';\n\nexport function DispColor () {\n  // const [color, setColor] = useState('#ffffff');\n  const [styles, setStyles] = useState({ backgroundColor: startcolor, });\n  const [Statustext, setStatustext] = useState(hexToRgb(startcolor));\n  const handleColor = (evt) => { \n    const x = evt.target.value;\n    // console.log(color, x);\n    if (CheckValidColor(x)) {\n      const y = hexToRgb(x);\n      if (y) {\n        // setColor(y);\n        setStyles({ backgroundColor: y, });\n        setStatustext(y);\n      } else {\n        // setColor(x);\n        setStyles({ backgroundColor: x, });\n        setStatustext(x);\n      }\n    } else {\n      setStyles({ backgroundColor: '#f53', });\n      setStatustext('Ошибка!');\n    }\n  };\n  // console.log(props);\n    return (\n      <form className=\"colorBG\" style={styles}>\n        <div className=\"colorCodeForm\">\n          <input className=\"color-input\" id=\"colorCode\" type=\"text\" onChange={handleColor}/>\n          <p className=\"result-string\"><span id=\"validcolor\">{Statustext}</span></p>\n        </div>\n      </form>\n    );\n}\n\nfunction CheckValidColor(color) {\n  let hex = color.trim().replace('#','');\n  if (!color.includes('#')) { return false; }\n  if (hex.length < 3) { return true; }\n  if (hex.length > 3 && hex.length < 6) { hex = hex.substring(0, 3); } \n  if (hex.length > 6) { return false; }\n  // eslint-disable-next-line no-undef\n  var e = document.getElementById('validcolor');\n  if (!e) { return false; }\n  e.style.borderColor = '';\n  e.style.borderColor = `#${hex}`;\n  var tmpcolor = e.style.borderColor;\n  if (tmpcolor.length == 0) {\n      return false;\n  }\n  return true;\n}\n\nfunction hexToRgb(val) {\n  if(val.includes('rgb')) {return val;}\n  const hex = val.trim().replace('#','');\n  const size = hex.length;\n  const rgb = { red:0, green:0, blue:0 };\n  let done = false;\n  if (size === 3 || (size > 3 && size < 6)) {\n    rgb.red = parseInt(hex[0]+hex[0], 16);\n    rgb.green = parseInt(hex[1]+hex[1], 16);\n    rgb.blue = parseInt(hex[2]+hex[2], 16);\n    done = true;\n  } else if (size >= 6) {\n    rgb.red = parseInt(hex[0]+hex[1], 16);\n    rgb.green = parseInt(hex[2]+hex[3], 16);\n    rgb.blue = parseInt(hex[4]+hex[5], 16);\n    done = true;\n  } else if (size < 3) {\n    return null;\n  }\n  if (done) {\n    return `rgb(${rgb.red},${rgb.green},${rgb.blue})`;\n  }\n  return `#${hex[0]}${hex[1]}${hex[2]}`;\n  // console.log(hex, size, rgb);\n}","import React from 'react';\n\nimport './App.css';\nimport './css/main.css';\n// import { items } from './data';\nimport {DispColor} from './DispColor';\n\nexport default function App() {\n  return (<DispColor />);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  /* eslint-disable-next-line no-undef */\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}